-- require('go').setup({
--
--   disable_defaults = false, -- true|false when true set false to all boolean settings and replace all table
--   -- settings with {}
--   go='go', -- go command, can be go[default] or go1.18beta1
--   goimports ='gopls', -- goimports command, can be gopls[default] or either goimports or golines if need to split long lines
--   gofmt = 'gopls', -- gofmt through gopls: alternative is gofumpt, goimports, golines, gofmt, etc
--   fillstruct = 'gopls',  -- set to fillstruct if gopls fails to fill struct
--   max_line_len = 0, -- max line length in golines format, Target maximum line length for golines
--   tag_transform = false, -- can be transform option("snakecase", "camelcase", etc) check gomodifytags for details and more options
--   tag_options = 'json=omitempty', -- sets options sent to gomodifytags, i.e., json=omitempty
--   gotests_template = "", -- sets gotests -template parameter (check gotests for details)
--   gotests_template_dir = "", -- sets gotests -template_dir parameter (check gotests for details)
--   comment_placeholder = '' ,  -- comment_placeholder your cool placeholder e.g. Û∞üì Óú§  Óòß  Ôåà  Óúà
--   icons = {breakpoint = 'üßò', currentpos = 'üèÉ'},  -- setup to `false` to disable icons setup
--   verbose = false,  -- output loginf in messages
--   lsp_cfg = false, -- true: use non-default gopls setup specified in go/lsp.lua
--                    -- false: do nothing
--                    -- if lsp_cfg is a table, merge table with with non-default gopls setup in go/lsp.lua, e.g.
--                    --   lsp_cfg = {settings={gopls={matcher='CaseInsensitive', ['local'] = 'your_local_module_path', gofumpt = true }}}
--   lsp_gofumpt = true, -- true: set default gofmt in gopls format to gofumpt
--                       -- false: do not set default gofmt in gopls format to gofumpt
--   lsp_on_attach = nil, -- nil: use on_attach function defined in go/lsp.lua,
--                        --      when lsp_cfg is true
--                        -- if lsp_on_attach is a function: use this function as on_attach function for gopls
--   lsp_keymaps = true, -- set to false to disable gopls/lsp keymap
--   lsp_codelens = true, -- set to false to disable codelens, true by default, you can use a function
--   -- function(bufnr)
--   --    vim.api.nvim_buf_set_keymap(bufnr, "n", "<space>F", "<cmd>lua vim.lsp.buf.formatting()<CR>", {noremap=true, silent=true})
--   -- end
--   -- to setup a table of codelens
--   diagnostic = {  -- set diagnostic to false to disable vim.diagnostic setup
--     hdlr = false, -- hook lsp diag handler and send diag to quickfix
--     underline = true,
--     -- virtual text setup
--     virtual_text = { spacing = 0, prefix = '‚ñ†' },
--     signs = true,
--     update_in_insert = false,
--   },
--   -- if you need to setup your ui for input and select, you can do it here
--   -- go_input = require('guihua.input').input -- set to vim.ui.input to disable guihua input
--   -- go_select = require('guihua.select').select -- vim.ui.select to disable guihua select
--   lsp_document_formatting = true,
--   -- set to true: use gopls to format
--   -- false if you want to use other formatter tool(e.g. efm, nulls)
--   lsp_inlay_hints = {
--     enable = false,
--   },
--   textobjects = true, -- enable default text objects through treesittter-text-objects
--   test_runner = 'go', -- one of {`go`,  `dlv`, `ginkgo`, `gotestsum`}
--   verbose_tests = true, -- set to add verbose flag to tests deprecated, see '-v' option
--   run_in_floaterm = false, -- set to true to run in a float window. :GoTermClose closes the floatterm
--                            -- float term recommend if you use gotestsum ginkgo with terminal color
--
--   floaterm = {   -- position
--     posititon = 'auto', -- one of {`top`, `bottom`, `left`, `right`, `center`, `auto`}
--     width = 0.45, -- width of float window if not auto
--     height = 0.98, -- height of float window if not auto
--     title_colors = 'nord', -- default to nord, one of {'nord', 'tokyo', 'dracula', 'rainbow', 'solarized ', 'monokai'}
--                               -- can also set to a list of colors to define colors to choose from
--                               -- e.g {'#D8DEE9', '#5E81AC', '#88C0D0', '#EBCB8B', '#A3BE8C', '#B48EAD'}
--   },
--   trouble = false, -- true: use trouble to open quickfix
--   test_efm = false, -- errorfomat for quickfix, default mix mode, set to true will be efm only
--   luasnip = false, -- enable included luasnip snippets. you can also disable while add lua/snips folder to luasnip load
--   --  Do not enable this if you already added the path, that will duplicate the entries
--   on_jobstart = function(cmd) _=cmd end, -- callback for stdout
--   on_stdout = function(err, data) _, _ = err, data end, -- callback when job started
--   on_stderr = function(err, data)  _, _ = err, data  end, -- callback for stderr
--   on_exit = function(code, signal, output)  _, _, _ = code, signal, output  end, -- callback for jobexit, output : string
--   iferr_vertical_shift = 4 -- defines where the cursor will end up vertically from the begining of if err statement
-- })
